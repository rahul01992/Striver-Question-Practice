#include <bits/stdc++.h> 
int solve(int index,int W,vector<int> &weight,vector<int> &value,vector<vector<int>> &dp){
    //Base case
    //when index is zero (we reached at last element)
    if(index==0){
        //check if I can take weight
        if(weight[0]<=W){
            return value[0];
        }
        else{
            return 0;
        }
    }

    if(dp[index][W]!=-1) return dp[index][W];

    int ntake=solve(index-1,W,weight,value,dp);
    int take=-1e9;
    if(weight[index]<=W){
        take=value[index]+solve(index-1,W-weight[index],weight,value,dp);
    }
    return dp[index][W]=max(ntake,take);
}
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
    vector<vector<int>>dp(n,vector<int>(maxWeight+1,-1));
    return solve(n-1,maxWeight,weight,value,dp);
}


// int solve(vector<int> &weight, vector<int> &value, int n, int capacity){
//     //Base case
//     if(n==0){
//         // if knapsack has capacity to store the last element
//         if(weight[0]<=capacity){
//             return value[0];//then include kr lo
//         }
//         else{
//             return 0;//otherwise exclude kr lo
//         }
//     }
//     int include=0;
//     if(weight[n]<=capacity){
//         include=value[n]+solve(weight,value,n-1,capacity-weight[n]);//include ( max weight decrease by curr weight value)
//     }
//     int exclude=solve(weight,value,n-1,capacity);//exclude
//     return max(include,exclude);
// }

// int solve_Mem(vector<int> &weight, vector<int> &value, int n, int capacity,int **dp){
//     //Base case
//     if(n==0){
//         // if knapsack has capacity to store the last element
//         if(weight[0]<=capacity){
//             return value[0];//then include kr lo
//         }
//         else{
//             return 0;//otherwise exclude kr lo
//         }
//     }
//     //check if ans is already exist
//     if(dp[n][capacity]!=-1){
//         return dp[n][capacity];
//     }
//     int include=0;
//     if(weight[n]<=capacity){
//         include=value[n]+solve_Mem(weight,value,n-1,capacity-weight[n],dp);//include ( max weight decrease by curr weight value)
//     }
//     int exclude=solve_Mem(weight,value,n-1,capacity,dp);//exclude
//     int ans= max(include,exclude);
//     dp[n][capacity]=ans;
//     return ans;
// }
