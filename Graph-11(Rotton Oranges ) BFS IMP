class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
         //{{r,c},time};(queue's form)
    queue<pair<pair<int,int>,int>>q;
    int n=grid.size();
    int m=grid[0].size();
     int vis[n][m];

    //check already rotton oranges ans push that oranges into queue at time t=0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(grid[i][j]==2){
                vis[i][j]=2;
                q.push({{i,j},0});
            }
            else{
                vis[i][j]=0;
            }
        }
    }
    int delrow[]={-1,0,1,0};
    int delcol[]={0,1,0,-1};
    int tm=0;
   

    while(!q.empty()){
        //pick up the row,col,and time from the queue
        int row=q.front().first.first;
        int col=q.front().first.second;
        int t=q.front().second;
        q.pop();
        tm=max(tm,t);

        //Now its time to exploure the neighbous of this rotton orange
        //here exactly 4 neighbours
        for(int i=0;i<4;i++){
                //neighbour's indexes
                int nrow=row+delrow[i];
                int ncol=col+delcol[i];

                //check the conditions of this neighbours
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m &&
                vis[nrow][ncol]==0 && grid[nrow][ncol]==1){
                    q.push({{nrow,ncol},t+1});
                    vis[nrow][ncol]=2;
                }
        }

    }

    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(vis[i][j]!=2 && grid[i][j]==1){
                return -1;
            }
        }
    }
    return tm;
        
    }
};
