#include <bits/stdc++.h> 
int merge(long long* &arr, int low, int mid, int high) {
    vector<int> temp; // temporary array
    int left = low;      // starting index of left half of arr
    int right = mid + 1;   // starting index of right half of arr

    //storing elements in the temporary array in a sorted manner//
int cnt=0;
    while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        }
        else {
            //If left element is greater then right element
            cnt+=mid-left+1;
            temp.push_back(arr[right]);
            right++;
        }
    }

    // if elements on the left half are still left //

    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }

    //  if elements on the right half are still left //
    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }
    return cnt;
}

int mergeSort(long long* &arr, int low, int high) {
    int cnt=0;
    if (low >= high) return cnt;
    int mid = (low + high) / 2 ;
    cnt+=mergeSort(arr, low, mid);  // left half
    cnt+=mergeSort(arr, mid + 1, high); // right half
    cnt+=merge(arr, low, mid, high);  // merging sorted halves
}

long long getInversions(long long *arr, int n){
    int low=0; 
    int high=n-1;
    return mergeSort(arr,low,high);      
}
















     // int count=0;
        // int i=0;
        // int j=1;
        // while(i<n-1){
        //     if(j==n){
        //         i++;
        //         j=i+1;
        //     }  
        //    else if(arr[i]>arr[j]){
        //         count++;
        //         j++;
        //     }
        //    else if(arr[i]<=arr[j]){
        //         j++;
        //     }
           
        // }
        // return count;

