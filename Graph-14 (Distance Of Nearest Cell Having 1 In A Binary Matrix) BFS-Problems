#include<queue>
#include<vector>
vector < vector < int > > nearest(vector < vector < int >> & mat, int n, int m) {
    //create visited array 2-D
    vector < vector < int >>visited(n,vector<int>(m,0));

      //distance array
    vector < vector < int >> dist(n,vector<int>(m,0));
    
    //queue {row,col,dist}
    //in the form of {{row,{col,dist}}
    queue<pair<int,pair<int,int>>>q;

    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++){
          if(mat[i][j]==1){

              //push the cell which have value is equal to 1 (with distance zero)
              q.push(make_pair(i,make_pair(j,0)));
              visited[i][j]=1;
          }
          
      }
    }
int delrow[]={-1,0,1,0};
int delcol[]={0,1,0,-1};
    while(!q.empty()){
        auto it=q.front();
        int row=it.first;
        int col=it.second.first;
        int distance=it.second.second;
        q.pop();

        dist[row][col]=distance;
        
        //traverse through neighbours of cell
        for(int i=0;i<4;i++){
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];

            if(nrow<n && nrow>=0 && ncol<m & ncol>=0 && visited[nrow][ncol]==0 && mat[nrow][ncol]==0){
                //mark it as visited when we push into queue
                visited[nrow][ncol]=1;
                q.push(make_pair(nrow,make_pair(ncol,distance+1)));
            }
        } 
    }
    return dist;
}
