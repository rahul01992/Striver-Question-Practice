#include <bits/stdc++.h>
void dfs(int node,unordered_map<int,list<int>> &adj,
unordered_map<int,bool> &visited, vector<int> &component){

    component.push_back(node);
    visited[node]=true;

    //recursive call for depth
    for(auto it: adj[node]){
        if(!visited[it]){
            dfs(it,adj,visited,component);
        }
    }

}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    unordered_map<int,list<int>>adj;

    //creating adjancy list from edge list
    for(int i=0;i<edges.size();i++){
        //see this concept in copy
        int u=edges[i][0];
        int v=edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

     unordered_map<int,bool>visited;
     vector<vector<int>> ans;
    //make sure that cover all the dissconnected components
    for(int i=0;i<V;i++){
        if(!visited[i]){
            vector<int>component;
            dfs(i,adj,visited,component);
            ans.push_back(component);
        }
    }
    return ans;
   

}
