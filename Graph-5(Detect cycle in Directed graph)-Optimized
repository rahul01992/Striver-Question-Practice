#include <unordered_map>
#include <vector>
int dfsDetectCycle(unordered_map<int,vector<int>> &adj,unordered_map<int,bool> &visited,int node,
 unordered_map<int,bool> DfsVisited){

   visited[node]=true;
   DfsVisited[node]=true;
  


   for(auto neighbour: adj[node]){
     if(visited[neighbour]==false){
      
       int x=dfsDetectCycle(adj,  visited, neighbour,DfsVisited);
          DfsVisited[neighbour]=false;
     
       if(x==1){
         return 1;
       }
     }
     else if(visited[neighbour]==true && DfsVisited[neighbour]==true){
       return 1;

     }
   }

   return 0;
 }
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {

   unordered_map<int,vector<int>> adj;
    for(auto edge: edges){
        int u=edge.first; 
        int v=edge.second;

        adj[u].push_back(v);
    }

    unordered_map<int,bool>visited;
    unordered_map<int,bool>DfsVisited;

    for(int i=1;i<=n;i++){
      if(visited[i]==false){
        int ans=dfsDetectCycle(adj,visited,i,DfsVisited);
        if(ans==1)
          return 1;
      }
    }
    return 0;
  }
