class Solution {
public:
void findNse(vector<int> &nse, vector<int> &heights){
        int n=heights.size();
        int i=n-1;
        stack<int>st;

        while(i>=0){
            //at starting stack is empty
            if(st.empty()){
                nse[i]=n;
                st.push(i);
                i--;
            }
            //keep the smaller elements (smaller elements in the stack)
            else if(!st.empty() && heights[st.top()]<heights[i]){
                nse[i]=st.top();
                st.push(i);
                i--;
            }
            else{
                //remove the greater elements
                while(!st.empty() && heights[st.top()]>=heights[i]){
                    st.pop();
                }
            }
        }
        //return nse;

    }

    void findPse(vector<int> &pse,vector<int> & heights){
        int i=0;
        int n=heights.size();
        stack<int>st;

        while(i<n){
            if(st.empty()){
                pse[i]=-1;
                st.push(i);
                i++;
            }
            else if(!st.empty() && heights[st.top()]<=heights[i]){
                pse[i]=st.top();
                st.push(i);
                i++;
            }
            else{
                while(!st.empty() && heights[st.top()]>heights[i]){
                    st.pop();
                }
            }
        }
        //return pse;

    }
    int largestRectangleArea(vector<int>& heights) {
        int n=heights.size();

        vector<int> nse(n);
        vector<int> pse(n);
        
        findNse(nse,heights);
        findPse(pse,heights);

        int maxArea=0;

        for(int i=0;i<n;i++){
            maxArea=max(maxArea,(heights[i]*(nse[i]-pse[i]-1)));
        }
        return maxArea;
    }


    int maximalRectangle(vector<vector<char>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();

        vector<vector<char>> prefix(n,m);

        for(int j=0;j<m-1;j++){
            int sum=0;
            for(int i=0;i<n-1;i++){
                sum+=matrix[i][j];
                if(matrix[i][j]==0){
                    sum=0;
                }
                prefix[i][j]=sum;
            }
        }

        int maxArea=0;

        for(int i=0;i<n-1;i++){
            
            maxArea=max(maxArea,largestRectangleArea(prefix[i]);
        }

        return maxArea;
        
    }
};
