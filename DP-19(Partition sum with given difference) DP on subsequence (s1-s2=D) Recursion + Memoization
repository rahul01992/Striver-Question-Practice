#include <bits/stdc++.h> 
int mod=1e9+7;
int solve(int index,int target,vector<int> &arr,vector<vector<int>> &dp){
    //base case

    // if(target==0) return 1;
    // if(index==0) return arr[0]==target;
    //index is zero
    if(index==0){
        if(target==0 && 0==arr[0]) return 2;
        if(target==0 || arr[0]==target) return 1;
        else return 0;
    }

    if(dp[index][target]!=-1) return dp[index][target];
   
    int npick=solve(index-1,target,arr,dp);
    int pick=0;
    if(target>=arr[index]){
        pick=solve(index-1,target-arr[index],arr,dp);
    }
    return dp[index][target]=(pick+npick)%mod;
}
int countPartitions(int n, int d, vector<int> &arr) {
    int totalsum=0;

    for(int i=0;i<n;i++) totalsum+=arr[i];

    int k=(totalsum-d)/2;

    if(totalsum-d<0 || ((totalsum-d)%2)!=0) return 0;
    vector<vector<int>> dp(n,vector<int>(k+1,-1));
    return solve(n-1,k,arr,dp);
    
}


