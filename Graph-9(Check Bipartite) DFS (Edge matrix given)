#include<unordered_map>
#include<list>
#include<vector>
#include<queue>
bool dfs(int node,int *color,int col,unordered_map<int,vector<int>> &adj){
	color[node]=col;

	for(auto neighbour:adj[node]){
		if(color[neighbour]==-1){
			if(dfs(neighbour,color,!col,adj)==false){
				return false;
			}
		}
		else if(color[neighbour]==col){
			return false;
		}
	}
	return true;

}
bool isGraphBirpatite(vector<vector<int>> &edges) {
	unordered_map<int,vector<int>>adj;
	for(int i=0;i<edges.size();i++){
		for(int j=0;j<edges[i].size();j++){
			if(edges[i][j]==1){
				adj[i].push_back(j);
				adj[j].push_back(i);
			}
		}
	}
	int v=edges.size();
	int color[v];
	//mark color intially to -1
        for (int i = 0; i < v; i++) {
          color[i] = -1;
        }

        for(int i=0;i<v;i++){
		//check if not coloured
		if(color[i]==-1){
			if(dfs(i,color,0,adj)==false){
				return false;
			}

		}
	}
	return true;
}
