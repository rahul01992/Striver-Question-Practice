class Solution {
public:
    ListNode* findKthNode(ListNode* temp,int k){
        int cnt=1;
        while(cnt<k && temp!=NULL){
            temp=temp->next;
            cnt++;
        }
        return temp;
    }

    ListNode* reverseLL(ListNode* temp){
        if(temp==NULL || temp->next==NULL){
            return temp;
        }
        ListNode* prev=NULL;

        while(temp!=NULL){
            ListNode* nextNode=temp->next;
            temp->next=prev;
            prev=temp;
            temp=nextNode;
        }
        return prev;
    }

    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* temp=head;
        ListNode* nextNode=NULL;
        ListNode* prevNode=NULL;

        while(temp!=NULL){

            ListNode* kthNode=findKthNode(temp,k);

            if(kthNode==NULL){
                //some work needs to be done
                if(prevNode!=NULL){
                    prevNode->next=temp;
                    break;
                } 
            }
            
            //if kthNode exist
            nextNode=kthNode->next;
            kthNode->next=NULL;

            //Now reverse the kth group
            ListNode* newHead=reverseLL(temp);

            //check if it is first kth group
            if(temp==head){
                head=kthNode;
                //prevNode=temp;
            }
            else{
                prevNode->next=kthNode;
                //temp=nextNode;
            }
            prevNode=temp;
            temp=nextNode;
        }
        return head;
    }
};
