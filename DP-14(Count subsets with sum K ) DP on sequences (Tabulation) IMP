int mod=1e9+7;
// int solve(int index,vector<int> &arr,int target,int size,vector<vector<int>> &dp){
// 	//base case
// 	if(target==0) return 1;

//     if(index==0) //return target==arr[0];
// 	{
// 		if(arr[index]==target){
// 			return 1;
// 		}
// 		else{
// 			return 0;
// 		}
// 	}	

// 	if(dp[index][target]!=-1) return dp[index][target];
// 	int npick=solve(index-1,arr,target,size,dp);
// 	int pick=0;
// 	if(target>=arr[index]){
// 		pick=solve(index-1,arr,target-arr[index],size,dp);
// 	}
// 	return dp[index][target]=((pick+npick)%mod);
// }
int findWays(vector<int>& arr, int k)
{
	int n=arr.size();
	vector<vector<int>>dp(n,vector<int>(k+1,0));
	//return solve(n-1,arr,k,n,dp);


	//Tabulation
	//base cases
	for(int i=0;i<n;i++){
		dp[i][0]=1;
	}

	if(arr[0]<=k) dp[0][arr[0]]=1;

	for(int ind=1;ind<n;ind++){
		for(int target=0;target<=k;target++){
			int npick=dp[ind-1][target];
			int pick=0;

			//keep in mind this target(This is not k , This will be target because it is changing )
			if(target>=arr[ind]){
				pick=dp[ind-1][target-arr[ind]];
			}
			dp[ind][target]=(pick+npick)%mod;
		}
	}
	return dp[n-1][k];
}
