int editDistance(string s1, string s2)
{
    int n=s1.size();
    int m=s2.size();
    vector<vector<int>>dp(n+1,vector<int>(m+1,0));
   // return solve(n,m,s1,s2,dp);

   //Tabulation
   //base case
//    for(int i=0;i<=n;i++){
//        dp[i][0]=i;
//    }
//    for(int j=0;j<=m;j++){
//        dp[0][j]=j;
//    }
vector<int>prev(m+1,0),curr(m+1,0);
for(int j=0;j<=m;j++){
    prev[j]=j;
}

   //Nested loops
   for(int i=0;i<=n;i++){
       curr[0]=i;
       for(int j=1;j<=m;j++){
         if (s1[i - 1] == s2[j - 1]) {
            curr[j] = 0 + prev[ j - 1];
         } 
         else {
           int insrt = 1 + curr[ j - 1];
           int dlt = 1 + prev[j];
           int rplc = 1 + prev[ j - 1];
            curr[j] = min(insrt, min(dlt, rplc));
         }
       }
       prev=curr;
   }
   return curr[m];
}
