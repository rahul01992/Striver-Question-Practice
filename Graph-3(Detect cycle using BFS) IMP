#include <bits/stdc++.h> 
bool CycleBFS(int src,unordered_map<int,bool> &visited,unordered_map<int,int> &parent,
  unordered_map<int,list<int>> &adj){
      queue<int>q;
      visited[src]=true;
      q.push(src);
      parent[src]=-1;


      while(!q.empty()){
          int front=q.front();
          q.pop();

          for(auto neighbour: adj[front]){
              //check is already visited and neighbour is not parent of front then cycle exist
              if(visited[neighbour]==true && parent[front]!=neighbour){
                  return true;
              }
              else if(!visited[neighbour]){
                  visited[neighbour]=true;
                  q.push(neighbour);
                  //set the parent of neighbour which is front
                  parent[neighbour]=front;
              }
          }
      }
      return false;
  }
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    //creating edge list
    unordered_map<int,list<int>> adj;
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }
 
    unordered_map<int,bool>visited;
    unordered_map<int,int>parent;

    for(int i=0;i<n;i++){
        if(!visited[i]){
        bool ans=CycleBFS(i,visited,parent,adj);
        if (ans == 1) {
          return "Yes";
        }
        }
    }
    return "No";
}
