int mod=1e9+7;
int solve(int index,vector<int> &arr,int target,int size,vector<vector<int>> &dp){
	//base case
	if(target==0) return 1;

    if(index==0) //return target==arr[0];
	{
		if(arr[index]==target){
			return 1;
		}
		else{
			return 0;
		}
	}	

	if(dp[index][target]!=-1) return dp[index][target];
	int npick=solve(index-1,arr,target,size,dp);
	int pick=0;
	if(target>=arr[index]){
		pick=solve(index-1,arr,target-arr[index],size,dp);
	}
	return dp[index][target]=((pick+npick)%mod);
}
int findWays(vector<int>& arr, int k)
{
	int n=arr.size();
	vector<vector<int>>dp(n,vector<int>(k+1,-1));
	return solve(n-1,arr,k,n,dp);
}
