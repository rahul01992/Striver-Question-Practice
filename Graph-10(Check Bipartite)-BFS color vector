class Solution {
public:
bool bfs(int start,int *color,vector<vector<int>>& edges){
	color[start]=1;
	queue<int>q;
	q.push(start);

	while(!q.empty()){
		int front=q.front();
		q.pop();

		for(auto neighbour: edges[front]){
			//check if neighbours are not coloured
			if(color[neighbour]==-1){
				//then color it to the opposite of its parents
				color[neighbour] = !color[front];
				q.push(neighbour);
			}

			//if color of neighbour is the same as the color of the parent(front) then no barpartite
			else if(color[neighbour]==color[front]){
				return false;
			}
		}
	}
	return true;

}
    bool isBipartite(vector<vector<int>>& edges) {
        //create adj list
	// unordered_map<int,vector<int>>adj;
	// for(int i=0;i<edges.size();i++){
	// 	int u=edges[i][0];
	// 	int v=edges[i][1];

	// 	adj[u].push_back(v);
	// 	adj[v].push_back(u);
	// }
  int v = edges.size();
//   for (vector<int>& edge : edges) {
//     for (int vertex : edge) {
//       if (vertex >= e) {
//         e = vertex + 1;
//       }
//     }
//   }
	int color[v];
	//mark color intially to -1
	for(int i=0;i<v;i++) color[i]=-1;

	for(int i=0;i<v;i++){
		//check if not coloured
		if(color[i]==-1){
			if(bfs(i,color,edges)==false){
				return false;
			}

		}
	}
	return true;  
    }
};
