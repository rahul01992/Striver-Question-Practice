#include <bits/stdc++.h>
int cnt=0;
void merge(vector<int> &arr, int low, int mid, int high) {
    vector<int> temp; // temporary array
    int left = low;      // starting index of left half of arr
    int right = mid + 1;   // starting index of right half of arr

    //storing elements in the temporary array in a sorted manner//

    while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        }
        else {
            temp.push_back(arr[right]);
            right++;
        }
    }

    // if elements on the left half are still left //

    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }

    //  if elements on the right half are still left //
    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }
}
int Count(vector<int> &arr,int low,int high,int mid){
    int right=mid+1;
    for(int i=low;i<=mid;i++){
        while(right<=high && arr[i]>2*arr[right]) right++;
        cnt+=(right-(mid+1));
    }
}

int mergeSort(vector<int> &arr, int low, int high) {
    if (low >= high) return cnt;
    int mid = (low + high) / 2 ;
    mergeSort(arr, low, mid);  // left half
 mergeSort(arr, mid + 1, high); // right half
   Count(arr,low,high,mid);
    merge(arr, low, mid, high);  // merging sorted halves
}
int reversePairs(vector<int> &arr, int n){
	int low=0; 
    int high=n-1;
    return mergeSort(arr,low,high);
   return cnt;
	
}
