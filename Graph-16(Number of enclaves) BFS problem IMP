class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();

        //make 2-D visited array (make all unvisited)
        vector<vector<int>>visited(n,vector<int>(m,0));

        //make the queue to store the row and col 
        queue<pair<int,int>>q;

        //traverse over the boundry of the grid and find one 1's and push that 1's into queue as welll

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 || j==0 || i==n-1 || j==m-1){
                    if(grid[i][j]==1){
                        q.push(make_pair(i,j));
                        visited[i][j]=1;
                    }
                }
            }
        }
            int delrow[]={-1,0,1,0};
            int delcol[]={0,1,0,-1};

            while(!q.empty()){
                auto it=q.front();
                int row=it.first;
                int col=it.second;
                q.pop();

                for(int i=0;i<4;i++){
                    int nrow=row+delrow[i];
                    int ncol=col+delcol[i];

                    if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && visited[nrow][ncol]==0 
                    && grid[nrow][ncol]==1){
                        visited[nrow][ncol]=1;
                        q.push(make_pair(nrow,ncol));
                    }
                }
            }
            int cnt=0;
            for(int i=0;i<n;i++){
                for(int j=0;j<m;j++){
                    if(grid[i][j]==1 && visited[i][j]==0){
                        cnt++;
                    }
                }
            }
            return cnt;
    }
};
