#include <bits/stdc++.h> 
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    int visited[vertex]={0};
    queue<int> q;
    vector<vector<int>> adj(vertex);

    for (auto edge : edges) {
        int u = edge.first;
        int v = edge.second;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    for(int i=0;i<vertex;i++){
        sort(adj[i].begin(),adj[i].end());
    }

    vector<int> bfs;
    for (int i = 0; i < vertex; i++) {
        if (!visited[i]) {
            q.push(i);
            visited[i] = 1;

            while (!q.empty()) {
                int front = q.front();
                q.pop();
                bfs.push_back(front);

               for(auto it:adj[front]){
                   if(!visited[it]){
                       visited[it]=1;
                       q.push(it);
                   }
               }
            }
        }
    }
    return bfs;
}
