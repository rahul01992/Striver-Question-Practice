#include <bits/stdc++.h> 
int solve(int i,int j ,string &s1,string &s2,vector<vector<int>>&dp){
    //base case (Keep in mind 0-1 base indexing)
    if(i==0 || j==0) return 0;

    if(dp[i][j]!=-1) return dp[i][j];

    //matching
    if(s1[i-1]==s2[j-1]){
        return 1+solve(i-1,j-1,s1,s2,dp);
    }
    //Not matching (We are finding out subsequences not substring)
    return dp[i][j]=max(solve(i-1,j,s1,s2,dp),solve(i,j-1,s1,s2,dp));
}
int lcs(string &s1,string &s2){
    int n=s1.size();
    int m=s2.size();
    //pass n and m as it is.. Because it is 0-1 indexing
    vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
    return solve(n,m,s1,s2,dp);
}
int longestPalindromeSubsequence(string s)
{
    string t=s;
    reverse(t.begin(),t.end());
    return lcs(s,t);
    
}
