#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
   //create adj list (now weight included in each edge)
  // {u,{v,w}}
   unordered_map<int,list<pair<int,int>>>adj;
   for(int i=0;i<edges;i++){
       int u=vec[i][0];
       int v=vec[i][1];
       int w=vec[i][2];

       adj[u].push_back(make_pair(v,w));
       adj[v].push_back(make_pair(u,w));

   }

   //create distance vector
   vector<int>distance(vertices);
   for(int i=0;i<vertices;i++){
       distance[i]=INT_MAX;
   }

   //set data for the source node
   distance[source]=0;

   //create set {node distance,node}
   set<pair<int,int>>st;
   st.insert(make_pair(0,source));

   while(!st.empty()){

       //fetch top's data (node with minimum distance fetch automatically)

       //st.begin() is the address of starting iterator(* operater give me value at address)
       auto top=*(st.begin());
       int NodeDistance=top.first;
       int topNode=top.second;
       
       //erase record from the set
       st.erase(st.begin());

       //traverse over the neighbour of topNode
       for(auto neighbour:adj[topNode]){

           if(NodeDistance+neighbour.second<distance[neighbour.first]){

               //find the record exist in set (if we find then we remove it)
               auto record=st.find(make_pair(distance[neighbour.first],neighbour.first));

               if(record!=st.end()){//record find
                   st.erase(record);
               }

               //update distance
               distance[neighbour.first]=NodeDistance+neighbour.second;

               //insert new entry into set
               st.insert(make_pair(distance[neighbour.first],neighbour.first));
           }
       }
   }
       return distance;
}
