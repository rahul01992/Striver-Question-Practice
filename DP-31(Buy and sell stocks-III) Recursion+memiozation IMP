int solve(int index,int buy,int cap,int n,vector<int>& prices,
Recursion+Memoization code
vector<vector<vector<int>>>&dp){
    //base case
    if(cap==0) return 0;
    if(index==n) return 0;

    //buy
    if(dp[index][buy][cap]!=-1) return dp[index][buy][cap];
    int profit=0;
    if(buy){
        profit=max(-prices[index]+solve(index+1,0,cap,n,prices,dp),
                                  solve(index+1,1,cap,n,prices,dp));
    }

    //Not buy (sell it)
    else{
        profit=max(prices[index]+solve(index+1,1,cap-1,n,prices,dp),
                                 solve(index+1,0,cap,n,prices,dp));
    }
    return dp[index][buy][cap]=profit;
}
int maxProfit(vector<int>& prices)
{
    int n=prices.size();
    vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));
   return solve(0,1,2,n,prices,dp);
