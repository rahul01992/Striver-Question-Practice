class Solution {
public:
ListNode* reverse(ListNode* head){
    if(head==NULL || head->next==NULL){
        return head;
    }
    ListNode* temp=head;
    ListNode* prev=NULL;
    while(temp!=NULL){
        ListNode* front=temp->next;
        temp->next=prev;
        prev=temp;
        temp=front;
    }
    return prev;
}
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return head;
        }
       //find middle for the LL
       ListNode* slow=head;
       ListNode* fast=head;
       while(fast->next!=NULL && fast->next->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
       }
       ListNode* secondHead=reverse(slow->next);
       //slow->next=NULL;
       ListNode * temp=head;

       while(secondHead!=NULL){
        if(temp->val!=secondHead->val){
            reverse(secondHead);
            return false;
        }
        temp=temp->next;
        secondHead=secondHead->next;
       }
       reverse(secondHead);
       return true;

    }
};
