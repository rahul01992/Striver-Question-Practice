
bool CycleDFS(int node, unordered_map<int,bool> &visited,
unordered_map<int,list<int>> &adj, int parent){
    visited[node]=true;

    for(auto neighbour: adj[node]){
        if(visited[neighbour]==false){
            bool result=CycleDFS(neighbour,visited,adj,node);
            if(result==true){
                return 1;
            }
        }
        // if visited is true for particular node and it is not parent then cycle present
        else if(parent != neighbour){
            return true;
        }
    }
    return false;
    
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    //creating edge list
    unordered_map<int,list<int>> adj;
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }
 
    unordered_map<int,bool>visited;
    //unordered_map<int,int>parent;

    for(int i=0;i<n;i++){
        if(!visited[i]){
        bool ans=CycleDFS(i,visited,adj,-1);
        if (ans == 1) {
          return "Yes";
        }
        }
    }
    return "No";
}
