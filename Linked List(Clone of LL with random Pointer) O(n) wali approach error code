#include <bits/stdc++.h> 
/*************************************************************

    Following is the LinkedListNode class structure

    template <typename T>   
    class LinkedListNode
    {
        public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode<T> *random;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*************************************************************/

LinkedListNode<int> *cloneRandomList(LinkedListNode<int> *head)
{
    if(head==NULL){
        return NULL;
    }

    //Copying the linked list without random random
    LinkedListNode<int> *temp=head;
    LinkedListNode<int> *newNode=new LinkedListNode<int>(temp->data);
     LinkedListNode<int> *cloneHead=newNode;
    temp=temp->next;
    while(temp!=NULL){
         LinkedListNode<int> *newNode2=new LinkedListNode<int>(temp->data);
         newNode->next=newNode2;
         newNode=newNode2;
         temp=temp->next;
    }
    temp=head;
    LinkedListNode<int> *originalNext=temp->next;
    LinkedListNode<int> *tempclone=cloneHead;
    LinkedListNode<int> * cloneNext=cloneHead->next;
    while(originalNext!=NULL && cloneNext!=NULL){
        temp->next=tempclone;
        tempclone->next=originalNext;
        temp=originalNext;
        tempclone=cloneNext;
        originalNext=originalNext->next;
        cloneNext=cloneNext->next;
    }
    temp->next=tempclone;
    tempclone->next=NULL;
  
    temp=head;
    while(temp!=NULL){
        if(temp->next!=NULL){
            if(temp->random!=NULL){
                 temp->next->random=temp->random->next;
        }
        else{
              temp=temp->next->next;
        }
        }
    }
    temp=head;
    tempclone=cloneHead;
    while(temp!=NULL){
        temp->next=tempclone->next;
        temp=temp->next;
        if(temp!=NULL){
        tempclone->next=temp->next;
        }
        tempclone=tempclone->next;
    }

return cloneHead;

    
   

    
}
