#include<vector>


//TABULATION
int solve(vector<int> &nums, int index, vector<int> &dp, int n) {
    dp[0] = nums[0];
    dp[1] = max(nums[0], nums[1]);

    for (int i = 2; i < n; i++) {
        int pick = nums[i] + dp[i - 2];
        int nonPick = dp[i - 1];
        dp[i] = std::max(pick, nonPick);
    }

    return dp[n - 1];
}

int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
    if (n == 0) {
        return 0;
    }
    if (n == 1) {
        return nums[0];
    }
    vector<int> dp(n, 0);
    return solve(nums, n - 1, dp, n);
}

//SPACE OPTIMIZATION

#include<vector>

int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
    int prev=nums[0];
    int prev2=0;
    for(int i=1;i<n;i++){
        int take=nums[i];
        if(i>1){
            take+=prev2;
        }
        int ntake=prev;

        int curri=max(ntake,take);

        prev2=prev;
        prev=curri;
    }
    return prev;
}
